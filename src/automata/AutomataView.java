package automata;

import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author daphn
 */
public class AutomataView extends javax.swing.JFrame {

    public AutomataView() {
        initComponents();
        initTablaDeTransiciones();
    }

    File archivo = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        diagramaImg = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaTran = new javax.swing.JTable();
        botonAgregarEstado = new javax.swing.JButton();
        creaDiagrama = new javax.swing.JButton();
        input = new javax.swing.JTextField();
        evaluar = new javax.swing.JButton();
        botonEliminarEstado = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        tablaTran.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Estados", "vocal", "+", "-", "*", "/", "FDC"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaTran.setRowHeight(25);
        tablaTran.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaTran);
        if (tablaTran.getColumnModel().getColumnCount() > 0) {
            tablaTran.getColumnModel().getColumn(0).setResizable(false);
            tablaTran.getColumnModel().getColumn(1).setResizable(false);
            tablaTran.getColumnModel().getColumn(2).setResizable(false);
            tablaTran.getColumnModel().getColumn(3).setResizable(false);
            tablaTran.getColumnModel().getColumn(4).setResizable(false);
            tablaTran.getColumnModel().getColumn(5).setResizable(false);
            tablaTran.getColumnModel().getColumn(6).setResizable(false);
        }

        botonAgregarEstado.setText("+");
        botonAgregarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarEstadoActionPerformed(evt);
            }
        });

        creaDiagrama.setText("Crear Diagrama");
        creaDiagrama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creaDiagramaActionPerformed(evt);
            }
        });

        evaluar.setText("Evaluar");
        evaluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluarActionPerformed(evt);
            }
        });

        botonEliminarEstado.setText("-");
        botonEliminarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarEstadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(diagramaImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botonAgregarEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(botonEliminarEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(creaDiagrama, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(evaluar, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAgregarEstado)
                    .addComponent(botonEliminarEstado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(creaDiagrama, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(diagramaImg, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(evaluar))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initTablaDeTransiciones() {
        comboBox.addItem("Error");
        comboBox.addItem("q0");
        setOpcionesDeEstados();
        DefaultTableModel model = (DefaultTableModel) tablaTran.getModel();
        model.addRow(new Object[]{"q0", "", "", "", "", "", "Error"});
        JComboBox fdcComboBox = new JComboBox();
        fdcComboBox.addItem("Error");
        fdcComboBox.addItem("Aceptar");
        TableColumn column6 = tablaTran.getColumnModel().getColumn(6);
        column6.setCellEditor(new DefaultCellEditor(fdcComboBox));
    }

    private void setOpcionesDeEstados() {
        TableColumn column1 = tablaTran.getColumnModel().getColumn(1);
        TableColumn column2 = tablaTran.getColumnModel().getColumn(2);
        TableColumn column3 = tablaTran.getColumnModel().getColumn(3);
        TableColumn column4 = tablaTran.getColumnModel().getColumn(4);
        TableColumn column5 = tablaTran.getColumnModel().getColumn(5);
        column1.setCellEditor(new DefaultCellEditor(comboBox));
        column2.setCellEditor(new DefaultCellEditor(comboBox));
        column3.setCellEditor(new DefaultCellEditor(comboBox));
        column4.setCellEditor(new DefaultCellEditor(comboBox));
        column5.setCellEditor(new DefaultCellEditor(comboBox));
    }
    private void botonAgregarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarEstadoActionPerformed
        int rowCount = tablaTran.getRowCount();
        if (rowCount >= 10) {
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tablaTran.getModel();
        String nombreEstado = "q" + Integer.toString(rowCount);
        model.addRow(new Object[]{nombreEstado, "", "", "", "", "", "Error"});
        comboBox.addItem(nombreEstado);
    }//GEN-LAST:event_botonAgregarEstadoActionPerformed

    private void creaDiagramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creaDiagramaActionPerformed
        int rowCount = tablaTran.getRowCount();
        List<Estado> estados = new ArrayList<>();
        boolean tieneFinal = false;
        for (int i = 0; i < rowCount; i++) {
            String nombreEstado = "q" + Integer.toString(i);
            boolean esFinal = false;
            String fdc = (String) tablaTran.getValueAt(i, 6);
            if (fdc.equals("Aceptar")) {
                esFinal = true;
                tieneFinal = true;
            }
            Estado estado = new Estado(nombreEstado, esFinal);
            estados.add(estado);
        }
        if (!tieneFinal) {
            String mensaje = "Es necesario ingresar al menos un estado final.";
            JOptionPane.showMessageDialog(rootPane, mensaje, "Error", 0);
            return;
        }
        for (int i = 0; i < rowCount; i++) {
            String column1 = (String) tablaTran.getValueAt(i, 1);
            String column2 = (String) tablaTran.getValueAt(i, 2);
            String column3 = (String) tablaTran.getValueAt(i, 3);
            String column4 = (String) tablaTran.getValueAt(i, 4);
            String column5 = (String) tablaTran.getValueAt(i, 5);
            if (!column1.isEmpty() && !column1.equals("Error")) {
                int indice = Estado.getIndice(column1);
                Transicion transicion = new Transicion('v', estados.get(indice));
                estados.get(i).agregarTransicion(transicion);
            }
            if (!column2.isEmpty() && !column2.equals("Error")) {
                int indice = Estado.getIndice(column2);
                Transicion transicion = new Transicion('+', estados.get(indice));
                estados.get(i).agregarTransicion(transicion);
            }
            if (!column3.isEmpty() && !column3.equals("Error")) {
                int indice = Estado.getIndice(column3);
                Transicion transicion = new Transicion('-', estados.get(indice));
                estados.get(i).agregarTransicion(transicion);
            }
            if (!column4.isEmpty() && !column4.equals("Error")) {
                int indice = Estado.getIndice(column4);
                Transicion transicion = new Transicion('*', estados.get(indice));
                estados.get(i).agregarTransicion(transicion);
            }
            if (!column5.isEmpty() && !column5.equals("Error")) {
                int indice = Estado.getIndice(column5);
                Transicion transicion = new Transicion('/', estados.get(indice));
                estados.get(i).agregarTransicion(transicion);
            }
        }

        automata.setEstados(estados);
        String directorio = new File("").getAbsolutePath();
        String archivoTexto = directorio.concat("\\automata.txt");
        String archivoImagen = directorio.concat("\\automata.jpg");

        System.out.println(archivoImagen);

        try ( FileWriter escritor = new FileWriter(archivoTexto)) {
            PrintWriter impresor = new PrintWriter(escritor);
            String diagraph = automata.toDigraph();
            impresor.print(diagraph);
        } catch (IOException ex) {
            Logger.getLogger(AutomataView.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            String dotPath = "C:\\Program Files\\Graphviz\\bin\\dot.exe";

            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = archivoTexto;
            cmd[3] = tOParam;
            cmd[4] = archivoImagen;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (IOException ex) {
            Logger.getLogger(AutomataView.class.getName()).log(Level.SEVERE, null, ex);
        }
        ActionListener listener = (ActionEvent event) -> {
            //Aqui abre la imagen del automata que se creo
            archivo = new File(archivoImagen);
            //archivo = new File("C:\\Users\\DPALACIOS\\Desktop\\automata.jpg");
            
            try {
                ImageIcon ImagIcon = new ImageIcon(archivo.toString());
                Image icono = ImagIcon.getImage().getScaledInstance(diagramaImg.getWidth(), diagramaImg.getHeight(), Image.SCALE_AREA_AVERAGING);
                Icon iconoEscalado = new ImageIcon(icono);
                diagramaImg.setIcon(iconoEscalado);
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error al abrir: " + ex);
            }
        };

        Timer timer = new Timer(2000, listener);
        timer.setRepeats(false);
        timer.start();

        System.out.println("se creooooooo el archivo");

    }//GEN-LAST:event_creaDiagramaActionPerformed

    private void evaluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluarActionPerformed
        if (automata.getEstados().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Automata vacío");
            return;
        }

        String expresion = input.getText().toLowerCase();
        int longitud = automata.getEstados().size();
        Estado inicial = automata.getEstados().get(0);
        boolean inicialVacio = inicial.getTransiciones().isEmpty();
        boolean esFinal = inicial.esFinal();
        if (longitud == 1 && inicialVacio && esFinal && expresion.isEmpty()) {
            String mensaje = "El automata reconoce la palabra!";
            JOptionPane.showMessageDialog(rootPane, mensaje, "Éxito!", 3);
            return;
        }
        if (expresion.isEmpty()) {
            String mensaje = "El automata no reconoce la palabra.";
            JOptionPane.showMessageDialog(rootPane, mensaje, "Fallo", 0);
            return;
        }
        Estado estadoInicial = automata.getEstados().get(0);
        boolean esCorrecto = automata.evaluarExpresion(expresion, estadoInicial);
        if (esCorrecto) {
            String mensaje = "El automata reconoce la palabra!";
            JOptionPane.showMessageDialog(rootPane, mensaje, "Éxito!", 3);
        } else {
            String mensaje = "El automata no reconoce la palabra.";
            JOptionPane.showMessageDialog(rootPane, mensaje, "Fallo", 0);
        }
    }//GEN-LAST:event_evaluarActionPerformed

    private void botonEliminarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarEstadoActionPerformed
        DefaultTableModel model = (DefaultTableModel) tablaTran.getModel();
        int rowCount = model.getRowCount();
        if (rowCount == 1) {
            return;
        }
        model.removeRow(--rowCount);
        String nombreEstado = "q" + Integer.toString(rowCount);
        comboBox.removeItem(nombreEstado);
    }//GEN-LAST:event_botonEliminarEstadoActionPerformed

    public static void main(String args[]) {
        try {

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AutomataView().setVisible(true);
            }
        });

    }

    JComboBox comboBox = new JComboBox();
    Automata automata = new Automata();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAgregarEstado;
    private javax.swing.JButton botonEliminarEstado;
    private javax.swing.JButton creaDiagrama;
    public static javax.swing.JLabel diagramaImg;
    private javax.swing.JButton evaluar;
    private javax.swing.JTextField input;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaTran;
    // End of variables declaration//GEN-END:variables
}
